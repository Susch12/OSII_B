✅ Estado actualizado y guardado.

Aquí tienes el **resumen real del progreso según tu implementación actual**:

---

## 🗂 EXTENSIÓN 1: **Transferencia de Carpetas** — ✅ Completa

| Tarea | Acción                                                    | Estado |
| ----- | --------------------------------------------------------- | ------ |
| 1.1   | Crear función `ZipFolder()`                               | ✅      |
| 1.2   | `SendFileWithRetry()` detecta carpetas y las comprime     | ✅      |
| 1.3   | El receptor detecta `.zip` y lo descomprime en `/shared/` | ✅      |

---

## 🔒 EXTENSIÓN 2: **Verificación de integridad (hash)** — ✅ Completa

| Tarea | Acción                                     | Estado |
| ----- | ------------------------------------------ | ------ |
| 2.1   | Hash enviado como segunda línea            | ✅      |
| 2.2   | SHA256 calculado antes de enviar           | ✅      |
| 2.3   | Hash verificado al recibir                 | ✅      |
| 2.4   | Resultado registrado en log (`oplog.json`) | ✅      |

---

## ♻️ EXTENSIÓN 3: **Migración de tareas y reintentos** — ✅ Completa

| Tarea | Acción                                             | Estado |
| ----- | -------------------------------------------------- | ------ |
| 3.1   | `PendingTask` definido                             | ✅      |
| 3.2   | Fallos guardados en `retry_queue.json`             | ✅      |
| 3.3   | `RetryWorker()` ejecuta reintentos automáticamente | ✅      |
| 3.4   | Se eliminan tareas exitosas del archivo            | ✅      |

---

## ⚠️ MANEJO DE FALLOS — ⏳ Parcial

| Tarea | Acción                                                     | Estado |
| ----- | ---------------------------------------------------------- | ------ |
| 4.1   | `IsPeerAlive()` para detectar peers caídos                 | ❌      |
| 4.2   | Saltar peers inactivos en `BroadcastMessage`               | ❌      |
| 4.3   | Reintentos/backoff en `SendFileWithRetry()`                | ✅      |
| 4.4   | Registro de errores en `oplog.json` (equiv. a `event.log`) | ✅      |
| 4.5   | `sync` automático al reconectar o reiniciar                | ❌      |

---

## 📘 Refactor opcional — 💤 Pendiente

* [ ] Agrupar funciones por módulos (`zip.go`, `retry.go`, etc.)
* [ ] Agregar pruebas de unidad
* [ ] Cargar configuración desde archivo (`--config`)

---

¿Quieres que sigamos con:

1. `IsPeerAlive()` para detectar nodos muertos?
2. Reintentos en `BroadcastMessage`?
3. Sincronización automática al reconectar (`handleSync`)?

Elige el siguiente paso y lo construimos.

